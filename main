lui $8, 0xFA19
ori $8, $8, 0xE366
addi  $9, $0, 1  #Sets register 9 to 1 to begin with
addi $23, $0, 0x2020 #Sets the register to the first spot in memory we will use to store C
addi $22, $0, 101 #Used to compare with $9 so the program knows when to stop 

#PART A
hashing:
multu $9, $8
mfhi $20
mflo $21
xor $10, $20, $21 # A1

multu $10, $8
mfhi $20
mflo $21
xor $10, $20, $21 # A2

multu $10, $8
mfhi $20
mflo $21
xor $10, $20, $21 # A3

multu $10, $8
mfhi $20
mflo $21
xor $10, $20, $21 # A4

multu $10, $8
mfhi $20
mflo $21
xor $10, $20, $21   #A5 is in $10 now

srl $11, $10, 16 # $11 is A5[31:16]
sll $12, $10, 16 # $12 is A5[15:0]
srl $12, $12, 16 # $12 is A5[15:0]
xor $15, $11, $12 #C = A5[31:16] XOR A5[15:0], $15 is C

srl $13, $15, 8 # $13 is C[15:8] 
sll $14, $15, 24 # $14 is C[7:0] 
srl $14, $14, 24 # The contents of $14 are then moved back to their original place
xor $15, $13, $14 # $15 is now the final version of C

sb $15, 0($23) #Stores the value of C into the appropriate spot in memory
addi $23, $23, 4 #Increments the memory address by 4
addi  $9, $9, 1 #Increments A by 1

bne $9, $22, hashing #Repeats the hashing loop until we perform it 100 times.


#PART B
addi  $9, $0, 1  #Resets $9 back to 1
addi $23, $0, 0x2020 #Resets the memory location back to 0x2020

storing_max:
lbu $16, 0($23) #Loads address A value to $16
add $19, $0, $23 #Stores address A location to $19
sb $16, 0x2000($0) #Stores the current highest value for C at address 0x2000
sw $19, 0x2004($0) #Stores the address of the current highest value for C at address 0x2004

next_address:
addi $23, $23, 4 #Increments the memory address by 4
addi  $9, $9, 1 #Increments A by 1
lbu $17, 0($23) #Loads Address B value to $17


ones_check:
addi $14, $0, 5 #Used to tell counter when to stop
addi $13, $0, 9 #Used to tell counter when to stop
addi $12, $12, 1 #Counter

andi $10, $20, 1 #Checks if LSB is 1
srl $20, $20, 1 #shifts $10 to the right so we may check the next bit with andi

beq $10, $0, reset_count
addi $15, $15, 1
beq $15, $14, match

bne $12, $13, ones_check #if $12 != $13 loop
j compare

reset_count:
addi $15, $0, 0
j ones_check

match:
addi $18, $18, 1

compare:
sltu $10, $17, $16 #Compares address B value to address A value

addi  $9, $9, 1  #Increments counter by 1
beq $9, $22, exit #If the counter reaches 100 we will skip to exit:
beq $10, $0, storing_max #If address B value is greater than address A value then we will store its value and address by going back to label storing_max
j next_address #Else go to next_address which will change the next address and then again compare to A

exit:
